/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IFeeManagerInterface extends utils.Interface {
  functions: {
    "getFeeConfig()": FunctionFragment;
    "getFeeConfigLastChangedAt()": FunctionFragment;
    "readAllowList(address)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setEnabled(address)": FunctionFragment;
    "setFeeConfig(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setNone(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getFeeConfig"
      | "getFeeConfigLastChangedAt"
      | "readAllowList"
      | "setAdmin"
      | "setEnabled"
      | "setFeeConfig"
      | "setNone"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFeeConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeConfigLastChangedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readAllowList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnabled",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeConfig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setNone",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeConfigLastChangedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEnabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNone", data: BytesLike): Result;

  events: {};
}

export interface IFeeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFeeManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getFeeConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        gasLimit: BigNumber;
        targetBlockRate: BigNumber;
        minBaseFee: BigNumber;
        targetGas: BigNumber;
        baseFeeChangeDenominator: BigNumber;
        minBlockGasCost: BigNumber;
        maxBlockGasCost: BigNumber;
        blockGasCostStep: BigNumber;
      }
    >;

    getFeeConfigLastChangedAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { blockNumber: BigNumber }>;

    readAllowList(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAdmin(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEnabled(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeConfig(
      gasLimit: PromiseOrValue<BigNumberish>,
      targetBlockRate: PromiseOrValue<BigNumberish>,
      minBaseFee: PromiseOrValue<BigNumberish>,
      targetGas: PromiseOrValue<BigNumberish>,
      baseFeeChangeDenominator: PromiseOrValue<BigNumberish>,
      minBlockGasCost: PromiseOrValue<BigNumberish>,
      maxBlockGasCost: PromiseOrValue<BigNumberish>,
      blockGasCostStep: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNone(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getFeeConfig(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      gasLimit: BigNumber;
      targetBlockRate: BigNumber;
      minBaseFee: BigNumber;
      targetGas: BigNumber;
      baseFeeChangeDenominator: BigNumber;
      minBlockGasCost: BigNumber;
      maxBlockGasCost: BigNumber;
      blockGasCostStep: BigNumber;
    }
  >;

  getFeeConfigLastChangedAt(overrides?: CallOverrides): Promise<BigNumber>;

  readAllowList(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAdmin(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEnabled(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeConfig(
    gasLimit: PromiseOrValue<BigNumberish>,
    targetBlockRate: PromiseOrValue<BigNumberish>,
    minBaseFee: PromiseOrValue<BigNumberish>,
    targetGas: PromiseOrValue<BigNumberish>,
    baseFeeChangeDenominator: PromiseOrValue<BigNumberish>,
    minBlockGasCost: PromiseOrValue<BigNumberish>,
    maxBlockGasCost: PromiseOrValue<BigNumberish>,
    blockGasCostStep: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNone(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getFeeConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        gasLimit: BigNumber;
        targetBlockRate: BigNumber;
        minBaseFee: BigNumber;
        targetGas: BigNumber;
        baseFeeChangeDenominator: BigNumber;
        minBlockGasCost: BigNumber;
        maxBlockGasCost: BigNumber;
        blockGasCostStep: BigNumber;
      }
    >;

    getFeeConfigLastChangedAt(overrides?: CallOverrides): Promise<BigNumber>;

    readAllowList(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnabled(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeConfig(
      gasLimit: PromiseOrValue<BigNumberish>,
      targetBlockRate: PromiseOrValue<BigNumberish>,
      minBaseFee: PromiseOrValue<BigNumberish>,
      targetGas: PromiseOrValue<BigNumberish>,
      baseFeeChangeDenominator: PromiseOrValue<BigNumberish>,
      minBlockGasCost: PromiseOrValue<BigNumberish>,
      maxBlockGasCost: PromiseOrValue<BigNumberish>,
      blockGasCostStep: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNone(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getFeeConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeConfigLastChangedAt(overrides?: CallOverrides): Promise<BigNumber>;

    readAllowList(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEnabled(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeConfig(
      gasLimit: PromiseOrValue<BigNumberish>,
      targetBlockRate: PromiseOrValue<BigNumberish>,
      minBaseFee: PromiseOrValue<BigNumberish>,
      targetGas: PromiseOrValue<BigNumberish>,
      baseFeeChangeDenominator: PromiseOrValue<BigNumberish>,
      minBlockGasCost: PromiseOrValue<BigNumberish>,
      maxBlockGasCost: PromiseOrValue<BigNumberish>,
      blockGasCostStep: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNone(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getFeeConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeConfigLastChangedAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readAllowList(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEnabled(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeConfig(
      gasLimit: PromiseOrValue<BigNumberish>,
      targetBlockRate: PromiseOrValue<BigNumberish>,
      minBaseFee: PromiseOrValue<BigNumberish>,
      targetGas: PromiseOrValue<BigNumberish>,
      baseFeeChangeDenominator: PromiseOrValue<BigNumberish>,
      minBlockGasCost: PromiseOrValue<BigNumberish>,
      maxBlockGasCost: PromiseOrValue<BigNumberish>,
      blockGasCostStep: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNone(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
